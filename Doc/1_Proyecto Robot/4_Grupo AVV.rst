=======================
üë®üèª‚Äçüéì Grupo AVV
=======================
Equipo formado por Agust√≠n Escalera Zamudio, V√≠ctor Gavira Florido y Vid Baƒáiƒá.

Concepto
=======================

Las batallas de robots son un tipo de competici√≥n en la cual robots dirigidos por control remoto luchan usando distintas estrategias para incapacitarse. Suele destacar la gran variedad de dise√±os y armas, siendo la premisa principal la de construir un robot con el menor n√∫mero de debilidades posible. Nuestro robot, denominado AVV, cuenta con un sistema de tracci√≥n diferencial y un arma que emula la pala de una excavadora. Siguiendo la estrategia de levantar a los enemigos, forz√°ndolos a perder tracci√≥n y expulsarlos del oct√°gono. 

*Especificaciones de dise√±o*
-----------------------------------------
 
Para maximizar la creatividad y minimizar costes, el inventario otorgado a cada equipo es particularmente peque√±o. Cabe destacar que, cuanto menor sea el inventario, m√°s f√°cil es perjudicar el rendimiento del robot si se toman malas decisiones en t√©rminos de dise√±o. Esto fuerza a los equipos a perfeccionar cada aspecto del robot para tener un rendimiento eficiente.

Adem√°s, con tal de facilitar aun m√°s la igualdad, los robots se rigen en base a un extenso reglamento, que limita las dimensiones m√°ximas a 200x250x100mm y el peso a 1kg. Fruto de esto, hemos optado por un dise√±o compacto, con tal de tener un bajo centro de gravedad y estabilidad decente.


*Sistema de tracci√≥n*
---------------------------------------

.. image:: ../_static/GrupoAVV/frames2200.gif 
   :width: 30%
   :align: right  

Se ha optado por un **sistema de tracci√≥n diferencial**, disponiendo de dos ruedas de tracci√≥n y una tercera rueda loca para aportar estabilidad. Las ruedas tractoras se accionar√°n con los dos **motores de reducci√≥n 150:1**, uno para cada rueda, con la posibilidad de a√±adir reducciones intermedias para aumentar el par motor. 
Cuando ambos motores giren a la misma velocidad y en el mismo sentido el robot podr√° avanzar en l√≠nea recta, mientras que al reducir la velocidad de giro de uno de los motores permitir√° que el robot trace una curva alrededor de un punto exterior. En caso de que ambos motores giren a la misma velocidad pero en sentidos opuestos, el robot girar√° alrededor de si mismo. Los motores se alimentar√°n con la bater√≠a LiPo, y su velocidad y sentido de giro se controlar√°n mediante **se√±ales PWM enviadas desde el ESP32**.


*Concepto del arma*
---------------------------------
El arma del robot busca elevar a los oponentes durante el combate, tratando de desestabilizarlos o hacer que pierdan la tracci√≥n. Para ello, se pueden recurrir a diversos mecanismos, normalmente, basados en inversiones cinem√°ticas de mecanismos b√°sicas como el mecanismo de 4 barras o el biela manivela. En este caso, debido a las limitaciones de materiales por normativa, y por la experiencia del grupo en la fabricaci√≥n con PLA, se opta por eliminar todas las deslizaderas existentes. 

La apuesta del grupo AVV es el mecanismo de 4 barras conocido como **Chebyshev Lambda**. Este mecanismo aproxima un **movimiento rectilineo** mediante el movimiento rotativo de uno de los eslabones. Este √∫ltimo, se consigue mediante la conexi√≥n de uno de los eslabones con el **servomotor S3003**. Gracias al uso de este motor, contamos con un par elevado, suficiente para elevar a oponentes de hasta 1 kg. 


Este mecanismo cuenta con unas proporciones establecidas entre sus eslabones, las cuales se usar√°n como punto de partida. Sin embargo, el prop√≥sito del grupo es implementar algoritmos gen√©ticos para optimizar caracter√≠sticas del mecanismo tales como:

.. image:: ../_static/GrupoAVV/MecanismoRecortado.gif 
   :width: 45%
   :align: left  

* Cumplir con restricciones de espacio (evitar colisiones con elementos circundantes, reducir altura total, etc.)
* Minimizar la p√©rdida de carga en las ruedas tractoras.
* Minimizar el par ejercido por el servomotor.

*P√≥ster resumen*
---------------------------------
El siguiente poster recoge de manera resumida los principales aspectos del robot de combate.

.. image:: ../_static/GrupoAVV/AVVCombatRobotPoster.svg

Dise√±o detalle
=======================


*Cinem√°tica del robot*
---------------------------------
Tal y como se coment√≥ en el concepto inicial, el robot cuenta con una tracci√≥n de tipo **"differential drive"**. Para poder manejar con comodidad un robot con esta tracci√≥n, es necesario realizar un estudio cinem√°tico del mismo. Este estudio se apoya principalmente en la aplicaci√≥n del concepto de Centro Instant√°neo de Rotaci√≥n, y permite calcular las velocidades perimetrales en cada rueda con el objetivo de mover el robot a una determinada velocidad, cumpliendo un radio de curvatura deseado. Las expresiones para determinar las velocidades en cada rueda son:

.. math::

   V_L = \frac{v}{\rho}(\rho - \frac{t}{2}) \\
   V_R = \frac{v}{\rho}(\rho + \frac{t}{2})


La siguiente figura permite entender estos conceptos de manera visual:

.. image:: ../_static/GrupoAVV/CIRexplain.svg

Sin embargo, como vemos es necesario definir un radio de curvatura :math:`\rho`. Este vendr√° dado por los inputs de nuestro control, que se realiza en la aplicaci√≥n **Dabble**. Esta app permite mandar consignas al microprocesador, a trav√©s de una interfaz muy amigable que cuenta con distintos controles: joysticks, botones, etc. En nuestro caso, se relaciona el radio del joystick con una velocidad, mientras que la orientaci√≥n del mismo est√° asociada al radio de curvatura. Los radios de curvatura menores se asocian a √°ngulos m√°s cercanos a la horizontal, mientras que los mayores se asocian a la vertical. La siguiente funci√≥n relaciona en nuestro caso el radio de curvatura con la orientaci√≥n del joystick, en grados:

.. image:: ../_static/GrupoAVV/RhoMapPlot.svg

Esta funci√≥n viene dada por la siguiente expresi√≥n:

.. math::

   \rho = \frac{56}{Joystick_{deg}-90}


Aplicando los conceptos anteriores, se puede simular el comportamiento del robot ante una entrada determinada. Las siguientes animaciones son un ejemplo de ello. Esta simulaci√≥n se ha desarrollado en MATLAB.

.. raw:: html

   <div style="display: flex; justify-content: center; gap: 20px;">
       <img src="../_static/GrupoAVV/arrowsGif.gif" width="45%">
       <img src="../_static/GrupoAVV/Joystick.gif" width="45%">
   </div>

*Optimizaci√≥n del mecanismo*
---------------------------------
La principal limitaci√≥n del **mecanismo Lambda de Chebyshev** es que para mantener la rectitud de la trayectoria **los eslabones deben mantener una relaci√≥n espec√≠fica** entre ellos. Por ello, la trayectoria del mecanismo solo puede desplazarse fuera del chasis del robot si se incrementa el tama√±o de los eslabones o si se desplaza todo el mecanismo hacia adelante. En el primer caso, se violar√≠an las restricciones de tama√±o de la competici√≥n, y en el segundo caso se incrementa el riesgo de que el robot vuelque al intentar levantar el adversario. Debido a lo anterior, se ha optado por modificar el mecanismo teniendo en cuenta cuatro objetivos principales:

* Cumplir con las restricciones de tama√±o impuestas.
* Hacer que el mecanismo siga la trayectoria deseada.
* Minimizar el par ejercido por el servomotor.
* Evitar el vuelco del robot.

Para alcanzar dichos objetivos, se puede jugar con las **longitudes de los eslabones**, la **posici√≥n de los puntos fijos O2 y O4** y las **distancias AB y BC**. 

Debido a la interacci√≥n entre los objetivos y entre las variables, se ha decidido utilizar un **algoritmo gen√©tico de evoluci√≥n diferencial**. Para ello, es necesario definir una poblaci√≥n de individuos, todos con un grupo definido de variables a optimizar consideradas "genes". En este caso, las variables a optimizar ser√°n las descritas previamente, adem√°s del √°ngulo inicial y final del recorrido del mecanismo.

.. image:: ../_static/GrupoAVV/ParametrosOpti.svg

Con ello, cada individuo de la poblaci√≥n ser√° un mecanismo con una configuraci√≥n √∫nica, que se resolver√° tanto para posici√≥n como para fuerzas en el recorrido angular definido del eslab√≥n motor. A partir de dichas soluciones, ser√° posible evaluar lo bien que cumple el mecanismo los objetivos buscados. Para ello, es necesario definir una funci√≥n de coste que, al evaluar un individuo, devuelva un error, que en definitiva indica que tan bien cumple dicho inidviduo los objetivos.

La **funci√≥n de coste** construida se compone de dos t√©rminos, uno que eval√∫a el error de las restricciones cinem√°ticas :math:`e_c` y otro que eval√∫e el error de las restricciones din√°micas :math:`e_d`, ambos asociados con sus respectivos coeficientes de coste :math:`k_c` y :math:`k_d`, respectivamente.

.. math::
   error = \sqrt(k_c\cdot e_c^2 + k_d\cdot e_d^2)	

Las **restricciones cinem√°ticas** se eval√∫an de dos formas, la primera es comprobando si los puntos fijos :math:`O_2` y :math:`O_4` est√°n dentro del espacio de dise√±o. Para ello, se recurre a una de las aplicaciones del `teorema de curva de Jordan <https://en.wikipedia.org/wiki/Jordan_curve_theorem#:~:text=.-,Application,-%5Bedit%5D>`_.
Para mejorar la evaluaci√≥n del error, no solo se comprueba si el punto est√° dentro o fuera, sino si alguna de las coordenadas est√° dentro del espacio de dise√±o. Con ello, el error asociado a esta restricci√≥n aumenta a m√°s coordenadas est√©n fuera del espacio de dise√±o.

La segunda restricci√≥n cinem√°tica est√° asociada a la trayectoria del punto :math:`C` del mecanismo. En primera instancia, se comprueba la variaci√≥n horizontal de la trayectoria del punto, restando la coordenada :math:`x` inicial del punto a la coordenada :math:`x` del punto en las sucesivas posiciones. Sin embargo, la trayectoria, aunque vertical, puede aparecer dentro del chasis del robot. Para ello, se a√±ade un t√©rmino adicional que comprueba si la trayectoria comienza en el punto deseado. Otro problema que puede aparecer es el hecho de que la trayectoria presenta un reducido movimiento vertical, adem√°s de que puede comenzar por debajo de la cota del suelo. Para ello, se a√±aden dos t√©rminos adicionales que comprueben si la variaci√≥n de la coordenada :math:`y` se acerca a la altura deseada, y si la coordenada :math:`y` inicial se acerca a la coordenada :math:`y_lim`.

.. math::
   e_c = \sqrt((k_1\cdot(n_x^2+n_y^2))^2 + (k_2\cdot\sum_{i=2}^{n}{(x_{ci}-x_{c1})} + k_3\cdot\left(x_i-x_{c1}\right) + {k}_4\cdot\left(h\ -\left|y_{cend}-y_{ci}\right|\right) + {k}_5\cdot\left(y_{lim}\ -y_{cmin}\right) )^2 )

En cuanto a las **restricciones din√°micas**, primero se eval√∫a el par requerido, incrementado el error a mayor sea el par m√°ximo necesario. En segundo lugar, se comprueba la carga vertical ejercida sobre el eje trasero del robot. Dicha fuerza se calcula realizando un equilibrio de momentos en el centro de gravedad del robot, considerando que sobre el punto C se aplica una fuerza vertical de 1kg en el instante en el que dicho punto est√° lo m√°s alejado del centro de gravedad.

.. math::
   e_d = \sqrt( (k_{1d} \cdot T^2 )^2 + (k_{3d} \cdot F_{zt})^2)

A partir de la ecuaci√≥n de restricci√≥n, es posible evaluar a cada individuo de la poblaci√≥n, y seleccionar al mejor (el que tiene el menor error). Posteriormente, es posible crear una nueva poblaci√≥n mezclando los genes del mejor individuo con el resto de miembros de la poblaci√≥n. El proceso se repite varias veces, obteniendose al final el mejor de los miembros, con los par√°metros optimizados.


Pruebas
=======================